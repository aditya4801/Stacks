class solution{
private:

    vector<int> nextSmallerElement(vector<int> arr, int n) {
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);

        for(int i=n-1; i>=0 ; i--) {
            int curr = arr[i];
            while(s.top() != -1 && arr[s.top()] >= curr)
            {
                s.pop();
            }
            //ans is stack ka top
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    
    vector<int> prevSmallerElement(vector<int> arr, int n) {
        stack<int> s;
        s.push(-1);
        vector<int> ans(n);

        for(int i=0; i<n; i++) {
            int curr = arr[i];
            while(s.top() != -1 && arr[s.top()] >= curr)
            {
                s.pop();
            }
            //ans is stack ka top
            ans[i] = s.top();
            s.push(i);
        }
        return ans; 
    }
    
    public:
    int laargestRectarea(vector<int>&height){
    
    int n=height.size();
    
    vector<int>next(n);
    next=nextsmallerelem(height,n);
    
    vector<int>prev(n);
    prev=prevsmallerelem(height,n);
    
    int area=INT_MAX;
    
    for(int i=0;i<n;i++){
    
    int l=height[i];
    
    if(next[i]==-1;{
    
    next[i]=n;
    }
   int b = next[i] - prev[i] - 1; finding next max width
    
    int newarea=l*b;
    
    area=max(area,newarea);
    }
    return area;
    }
    }
