bool findRedundant(string &s){
staCK<int>st;

for(int i=0;i,s.length();i++){
char ch=s[i];

if(ch=='(' || ch=='+' || ch=='-' || ch=='*' || ch=='/')
s.push(ch)
}
else{
if(ch==')'){

//variable initialization of isredundant 
bool isRedundant=true;

//check if there is any ( or operator before closed bracket
while(st.top()!='('){
char ch=s.top();
if(top=='+' || top=='-' || top=='*' || top=='/'){
isRedundant=false;
}
st.top();
}
if(ifRedundant == true){
return true;
st.pop(); // if ( is found pop it to come out of the loop
}
}
}
return false;
}
